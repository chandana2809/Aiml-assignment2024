import heapq

# Define the graph and its associated costs
graph = {
    0: [(1, 4), (2, 1)],
    1: [(3, 2), (4, 3)],
    2: [(3, 5)],
    3: [(5, 6)],
    4: [(5, 7)],
    5: []
}

def best_first_search(graph, start, goal):
    # Priority queue to store nodes based on their heuristic value
    priority_queue = [(0, start)]  # (heuristic value, node)
    # Dictionary to track the cost estimate for each node
    cost_estimate = {node: float('inf') for node in graph}
    cost_estimate[start] = 0
    # Dictionary to store the parent node for each node in the shortest path
    parent = {}

    while priority_queue:
        _, current_node = heapq.heappop(priority_queue)

        if current_node == goal:
            # Reconstruct the shortest path
            shortest_path = []
            while current_node is not None:
                shortest_path.append(current_node)
                current_node = parent.get(current_node)
            return shortest_path[::-1]

        for neighbor, cost in graph[current_node]:
            estimated_cost = cost
            if estimated_cost < cost_estimate[neighbor]:
                cost_estimate[neighbor] = estimated_cost
                parent[neighbor] = current_node
                heapq.heappush(priority_queue, (estimated_cost, neighbor))

    return None

# Call the function to find the shortest path from node 0 to node 5
shortest_path = best_first_search(graph, 0, 5)
if shortest_path:
    print("Shortest path from node 0 to node 5:", shortest_path)
else:
    print("No path found from node 0 to node 5")
